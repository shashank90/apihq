[
    {
        "rule": "operation-tag-defined" ,
        "info" : {
            "headline":"Grouping Operations with Tags",
            "description": "You can assign a list of tags to each API operation. Tagged operations may be handled differently by tools and libraries. For example, Swagger UI uses tags to group the displayed operations.",
            "example" : "paths:\n  /pet/findByStatus:\n    get:\n      summary: Finds pets by Status\n      tags:\n        - pets\n      ...\n  /pet:\n    post:\n      summary: Adds a new pet to the store\n      tags:\n        - pets\n      ...\ntags:\n  - name: pets\n    description: Everything about your Pets\n    externalDocs:\n      url: http://docs.my-api.com/pet-operations.htm\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      url: http://docs.my-api.com/store-orders.htm"
        }
    },
    {
        "rule": "operation-description" ,
        "info" : {
            "headline":"Operation Description",
            "description": "For each path, you can define operations (HTTP methods) that can be used to access that path like get, post, put, patch, delete, head, and options. And a description can be added for each such operation",
            "example" : "paths:\n  /users/{id}:\n    get:\n      summary: Gets a user by ID.\n      description: >\n        A detailed description of the operation.\n        GitHub Flavored Markdown can be used for rich text representation\""
        }
    },
    {
        "rule": "string-boundary" ,
        "info" : {
            "headline":"String Boundary",
            "description": "Add string boundary to limit input length",
            "example" : "post:\n  description: Creates a new pet in the store\n  operationId: addPet\n  requestBody:\n    description: Pet to add to the store\n    required: true\n    content:\n      application/json:\n        schema:\n          $ref: \"#/components/schemas/NewPet\"\n\n\nNewPet:\n  type: object\n  description: JSON defining a Pet object\n  required:\n    - name\n  properties:\n    name:\n      type: string\n      maxLength: 10\n      pattern: ^[A-Za-z0-9]{3,10}$"
        }
    },
    {
        "rule": "oas3-api-servers" ,
        "info" : {
            "headline":"OpenAPI servers",
            "description": "OpenAPI servers must be present and non-empty array",
            "example" : "servers:\n  - url: https://example.com/api\n    description: Production server\n  - url: https://staging.example.com/api\n    description: Staging server\n  - url: http://localhost:3001\n    description: Development server"
        }
    },
    {
        "rule": "content-entry-contains-schema" ,
        "info" : {
            "headline":"Missing schema definition",
            "description": "Provide schema definition for given content.",
            "example" : "responses:\n  '200':\n    description: A User object\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: The user ID.\n            username:\n              type: string\n              description: The user name."
        }
    },
    {
        "rule": "content-type-parameter" ,
        "info" : {
            "headline":"Content-Type parameter",
            "description": "Content-Type parameter not needed explicitly in header",
            "example" : "paths:\n  '/v1/things':\n    post:\n      operationId: create_thing\n      requestBody:\n          description: 'The new Thing instance'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'"
        }
    },
    {
        "rule": "accept-parameter" ,
        "info" : {
            "headline":"Accept parameter",
            "description": "Accept parameter not needed explicitly in header",
            "example" : "paths:\n  '/v1/things':\n    get:\n      operationId: list_things\n      responses:\n        '200':\n          description: 'Success response!'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThingCollection'"
        }
    },
    {
        "rule": "builtin" ,
        "info" : {
            "headline":"Equivalent Paths",
            "description": "Define a single path /path/{parameter} with multiple operations (here GET and PUT):",
            "example" : "/path/{IDs}:\n  get:\n    description: Get the ID list\n    parameters:\n      name: IDs\n      in: path\n      required: true\n      type: string\n      # ...\n  put:\n    description: Add IDs to the ID list\n    parameters:\n      name: addIDs\n      in: path\n      required: true\n      type: string\n      # ..."
        }
    },
    {
        "rule": "property-description" ,
        "info" : {
            "headline":"Property description",
            "description": "Schema properties should have a non-empty description.",
            "example" : "components:\n  schemas:\n    Thing:\n      type: object\n      properties:\n        thing_id:\n          description: The ID associated with the Thing instance.\n          type: string\n        thing_type:\n          description: The type associated with the Thing instance.\n          type: string"
        }
    },
    {
        "rule": "malformed-spec" ,
        "info" : {
            "headline":"Malformed Spec",
            "description": "One or more nodes are misplaced. Or node type isn't specified properly",
            "example" : ""
        }
    }
]